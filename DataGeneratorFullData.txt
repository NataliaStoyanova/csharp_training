using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using WebAddressbookTests;

namespace addressbook_test_data_generators
{
    class Program
    {
        static void Main(string[] args)
        {
            //data type: group or contacts 
            string datatype = args[0];
            //number of lines to generate
            int count = Convert.ToInt32(args[1]);
            string filename = args[2];
            //format: csv,xmsl, json
            string format = args[3];

            if (datatype == "group")
            {
                StreamWriter writerGroups = new StreamWriter(filename);
                List<GroupData> groups = new List<GroupData>();
                for (int i = 0; i < count; i++)
                {
                    groups.Add(new GroupData(TestBase.GenerateRandomString(10))
                    {
                        Group_header = TestBase.GenerateRandomString(10),
                        Group_footer = TestBase.GenerateRandomString(10)
                    });
                }
                if (format == "csv")
                {
                    writeGroupsToCsvFile(groups, writerGroups);
                }
                else if (format == "xml")
                {
                    writeGroupsToXmlFile(groups, writerGroups);
                }
                else if (format == "json")
                {
                    writeGroupsToJsonFile(groups, writerGroups);
                }
                else
                {
                    System.Console.Out.Write("Unrecognised format " + format);
                }
                writerGroups.Close();
            }
            else if (datatype == "contact")
               {
                    //file name is a parameter in args[1]
                    StreamWriter writerContacts = new StreamWriter(filename);
                    List<ContactData> contacts = new List<ContactData>();
                    for (int i = 0; i < count; i++)
                    {
                        contacts.Add(new ContactData()
                        {
                            Firstname = TestBase.GenerateRandomString(15),
                            Middlename = TestBase.GenerateRandomString(15),
                            Lastname = TestBase.GenerateRandomString(15),
                            Nickname = TestBase.GenerateRandomString(10),
                            Title = TestBase.GenerateRandomString(3),
                            Company = TestBase.GenerateRandomString(10),
                            Address = TestBase.GenerateRandomString(10),
                            Home = TestBase.GenerateRandomPhoneNumber(),
                            Mobile = TestBase.GenerateRandomPhoneNumber(),
                            Work = TestBase.GenerateRandomPhoneNumber(),
                            Fax = TestBase.GenerateRandomPhoneNumber(),
                            Email = TestBase.GenerateRandomEmail(),
                            Email2 = TestBase.GenerateRandomEmail(),
                            Email3 = TestBase.GenerateRandomEmail(),
                            Homepage = TestBase.GenerateRandomWebAddress(),
                            Bday = TestBase.GenerateRandomNumber(31),
                            Bmonth = TestBase.GenerateRandomMonth(),
                            Byear = TestBase.GenerateRandomYear(),
                            Aday = TestBase.GenerateRandomNumber(31),
                            Amonth = TestBase.GenerateRandomMonth(),
                            Ayear = TestBase.GenerateRandomYear(),
                            Notes = TestBase.GenerateRandomString(10),
                            Phone2 = TestBase.GenerateRandomPhoneNumber(),
                            Address2 = TestBase.GenerateRandomString(10)
                        });
                    }

                    if (format == "csv")
                    {
                        writeContactsToCsvFile(contacts, writerContacts);
                    }
                    else if (format == "xml")
                    {
                        writeContactsToXmlFile(contacts, writerContacts);
                    }
                    else if (format == "json")
                    {
                        writeContactsToJsonFile(contacts, writerContacts);
                    }
                    else
                    {
                        System.Console.Out.Write("Unrecognised format " + format);
                    }
                    writerContacts.Close();         
                }

                static void writeGroupsToCsvFile(List<GroupData> groups, StreamWriter writer)
                {
                    foreach (GroupData group in groups)
                    {
                        writer.WriteLine(String.Format("${0},${1},${2}",
                            group.Group_name,
                            group.Group_header,
                            group.Group_footer
                            ));
                    }
                }

                static void writeGroupsToXmlFile(List<GroupData> groups, StreamWriter writer)
                {
                    new XmlSerializer(typeof(List<GroupData>)).Serialize(writer, groups);
                }

                static void writeGroupsToJsonFile(List<GroupData> groups, StreamWriter writer)
                {
                    writer.Write(JsonConvert.SerializeObject(groups, Newtonsoft.Json.Formatting.Indented));
                }

                static void writeContactsToCsvFile(List<ContactData> contacts, StreamWriter writer)
                {
                    foreach (ContactData contact in contacts)
                    {
                        writer.WriteLine(String.Format("${0},${1},${2},${3},${4},${5},${6},${7},${8},${9},${10},${11},${12},${13},${14},${15},${16},${17},${18},${19},${20},${21},${22},${23},${24}",
                             TestBase.GenerateRandomString(15),
                             TestBase.GenerateRandomString(15),
                             TestBase.GenerateRandomString(15),
                             TestBase.GenerateRandomString(10),
                             TestBase.GenerateRandomString(3),
                             TestBase.GenerateRandomString(10),
                             TestBase.GenerateRandomString(10),
                             TestBase.GenerateRandomPhoneNumber(),
                             TestBase.GenerateRandomPhoneNumber(),
                             TestBase.GenerateRandomPhoneNumber(),
                             TestBase.GenerateRandomPhoneNumber(),
                             TestBase.GenerateRandomEmail(),
                             TestBase.GenerateRandomEmail(),
                             TestBase.GenerateRandomEmail(),
                             TestBase.GenerateRandomWebAddress(),
                             TestBase.GenerateRandomNumber(31),
                             TestBase.GenerateRandomMonth(),
                             TestBase.GenerateRandomYear(),
                             TestBase.GenerateRandomNumber(31),
                             TestBase.GenerateRandomMonth(),
                             TestBase.GenerateRandomYear(),
                             TestBase.GenerateRandomString(10),
                             TestBase.GenerateRandomPhoneNumber(),
                             TestBase.GenerateRandomString(10)
                           ));
                    }
                }

                static void writeContactsToXmlFile(List<ContactData> contacts, StreamWriter writer)
                {
                    new XmlSerializer(typeof(List<ContactData>)).Serialize(writer, contacts);
                }

                static void writeContactsToJsonFile(List<ContactData> contacts, StreamWriter writer)
                {
                    writer.Write(JsonConvert.SerializeObject(contacts, Newtonsoft.Json.Formatting.Indented));
                }          
            }
        }
    }

